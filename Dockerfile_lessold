# Grab pnpm
FROM cl00e9ment/node.js-builder:light

# Grab Java: https://hub.docker.com/layers/library/openjdk/17-alpine/images/sha256-a996cdcc040704ec6badaf5fecf1e144c096e00231a29188596c784bcf858d05?context=explore
RUN apk add --no-cache java-cacerts

ENV JAVA_HOME=/opt/jdk17

RUN \
    #set -eux && \
    #arch="$(apk --print-arch)" && \
    #case "$arch" in 'x86_64' && \
    downloadUrl='https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz' && \
    #downloadSha256='f07a1ac921333dafac1cd886ad49600ce143be7efebd32e1a02599a8a0829dd4' && \
    #*) echo >&2 "error: unsupported architecture: '$arch'"; exit 1 ;; 	esac; && \
    wget -O oracle_jdk.tgz "$downloadUrl" && \
    #echo "$downloadSha256 *openjdk.tgz" | sha256sum -c -&& \
    mkdir -p "$JAVA_HOME" && \
    tar --extract --file oracle_jdk.tgz --directory "$JAVA_HOME" --strip-components 1 && \
    # --no-same-owner && \
    rm oracle_jdk.tgz* && \
    rm -rf "$JAVA_HOME/lib/security/cacerts" && \
    ln -sT /etc/ssl/certs/java/cacerts "$JAVA_HOME/lib/security/cacerts"

ENV JAVA_VERSION=17
ENV PATH="$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

RUN \
    #ln --help && \
    ln -s "$JAVA_HOME/bin" /bin 
    #ln -s "$JAVA_HOME/bin/java" /bin/java && \
    #ln -s "$JAVA_HOME/bin/javac" /bin/javac

RUN ls -al /bin

RUN \
    #export PATH="$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" && \
    #ls -al "$JAVA_HOME/bin" && \
    #source /etc/profile && \
    echo $PATH && \
    #env && \
    export -p && \
    #java -Xshare:dump && \
    #fileEncoding="$(echo 'System.out.println(System.getProperty("file.encoding"))' | jshell -s -)" && \
    #[ "$fileEncoding" = 'UTF-8' ] && \
    #rm -rf ~/.java && \
    #javac --version && \
    java --version

# SBT install: https://hub.docker.com/r/buildo/scala-sbt-alpine/dockerfile
ARG SCALA_VERSION=2.12.11
ARG SBT_VERSION=1.3.9
ENV SCALA_HOME=/usr/share/scala
RUN apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \
  apk add --no-cache bash && \
  cd "/tmp" && \
  wget "https://downloads.typesafe.com/scala/${SCALA_VERSION}/scala-${SCALA_VERSION}.tgz" && \
  tar xzf "scala-${SCALA_VERSION}.tgz" && \
  mkdir "${SCALA_HOME}" && \
  rm "/tmp/scala-${SCALA_VERSION}/bin/"*.bat && \
  mv "/tmp/scala-${SCALA_VERSION}/bin" "/tmp/scala-${SCALA_VERSION}/lib" "${SCALA_HOME}" && \
  ln -s "${SCALA_HOME}/bin/"* "/usr/bin/" && \
  apk del .build-dependencies && \
  rm -rf "/tmp/"*

RUN \
  apk add --no-cache --virtual=.build-dependencies bash curl bc ca-certificates && \
  cd "/tmp" && \
  update-ca-certificates && \
  #scala -version && \
  #scalac -version && \
  curl -fsL https://github.com/sbt/sbt/releases/download/v$SBT_VERSION/sbt-$SBT_VERSION.tgz | tar xfz - -C /usr/local && \
  $(mv /usr/local/sbt-launcher-packaging-$SBT_VERSION /usr/local/sbt || true) && \
  ln -s /usr/local/sbt/bin/* /usr/local/bin/ && \
  apk del .build-dependencies && \
  rm -rf "/tmp/"*

#RUN \
#  sbt -Dsbt.rootdir=true -batch sbtVersion && \
#  rm -rf project target

#FROM ubuntu:jammy

# Update packages and add new ones
#RUN apt-get update && \
#    apt-get install sudo apt-transport-https curl gnupg -yqq

# Set final env vars
ENV LANG "en_US.UTF-8"
ENV LC_CTYPE "en_US.UTF-8"
ENV TZ=Etc/GMT

# Copy in startup info
WORKDIR /home/lichess
ADD run.sh .